[{
    "title": "Automatic staging environment creation in Azure Static Web Apps",
    "date": "",
    "description": "",
    "body": "Everyone knows that publishing code directly to Production is not the best idea. Azure Static Web Apps offer the ability to automatically create a fully-functional staging environment for you when you want to publish new code.\nI\u0026rsquo;m going to start this article based on the assumption that you\u0026rsquo;ve already set up your Azure Static Web App and the GitHub Action that is publishing your content to Azure. (Not yet? Here is a tutorial how to setup Hugo on Azure Static Web Apps)\nMake the change Begin with making a change to the code in your repository. Make sure you do this in a seperate branch. After you\u0026rsquo;ve made the changes, commit them to your branch.\nCreate a pull request Next, create a pull request from this change. After the pull request is created, the GitHub Actions deployment workflow runs and deploys your changes to a staging environment.\nOnce the workflow has completed building and deploying your app, the GitHub bot adds a comment to your pull request which contains the URL of the staging environment. You can click on this link to see your staged changes.\nFor a given pull request, the URL remains the same even if you push new updates. In addition to the URL staying constant, the same staging environment is reused for the life of the pull request.\nNote: At this moment access to staging environments is not restricted, so be careful when publishing sensitive content.\nPublish your changes Once you\u0026rsquo;ve reviewed your changes in the staging environment you can publish your code to production by merging the pull request. Your staging environment will be automatically deleted at this time.\nThe GitHub Action running on your main branch kicks in again to build and publish your code to your Production URL.\n",
    "ref": "/2020/06/automatic-staging-environment-creation-in-azure-static-web-apps/"
  },{
    "title": "Bye bye Wordpress, Hello Hugo",
    "date": "",
    "description": "",
    "body": "This site has been running on Wordpress ever since it conception back in 2011. As you might have noticed there is not a lot of new content added over the last couple of years. But that doesn\u0026rsquo;t mean that the site could run without maintenance. Especially since there are a lot of people that love to attack unpatched Wordpress installations.\nWith the preview release of Azure Static WebApps and the ever growing populairity of Static site generators like Hugo, I decided it was time for me to bite the bullet and migrate away from Wordpress.\nAs you can see the result is blazing fast. It\u0026rsquo;s just plain old HTML, CSS and JS running on an Azure Static Web App with a little help from Cloudflare.\n",
    "ref": "/hugo/bye-bye-wordpress-hello-hugo/"
  },{
    "title": "How to run SPCAF v5 analysis during TeamBuild in TFS 2013",
    "date": "",
    "description": "",
    "body": "This how-to is based on the SPCAF how-to written for TFS 2012.\nIf you are looking how to run SPCAF v4 during TeamBuild in TFS 2013, see this post.\n SharePoint code analysis with SPCAF can also be executed during a TFS Team Build. This helps to ensure the correctness of the SharePoint code. During the Team Build all found errors and warnings are listed in the build result. Additionally the SPCAF reports can be generated and saved to the output directory.\nSPCAF supports the Team Build with the following products:\n TFS 2010 TFS 2012 TFS 2013 (with this how-to) Visual Studio Online  To support TFS 2010 and TFS 2012/2013 and VSO, SPCAF comes with 2 different build activities which can be integrated into the workflow of a Team Build, depending on the version of TFS. The build activities can be found within the installation directory of SPCAF in subfolder “TeamBuildActivities”.\n SPCAF.BuildActivity.TFS2010.dll for TFS 2010 SPCAF.BuildActivity.TFS2012.dll for TFS 2012/2013 and Visual Studio Online  Note: The build activities should not be copied directly into the installation folder of SPCAF because SPCAF searches during analysis within the installation folder for custom rules. As the activities depend on Team Build assemblies they cannot be loaded and SPCAF cannot execute.\nNote: If you are not familiar with configuration of team builds in TFS please request somebody to help you.\nThe following steps provide the general instructions for the Team Build. Some standard TFS configuration steps are skipped.\nPreparation To run SPCAF on the build server the SPCAF assemblies must be available on the build server. You don’t need to install SPCAF on the server!\nNote: You can download a preconfigured package of SPCAF Server from the Visual Studio Gallery and skip steps 2 to 4 of the following description.\n  Open Source Control of TFS and navigate to folder “BuildProcessTemplates” of your team project. It is possible that this folder does not exist in your TFS 2013 team project. You can create it manually.\n  Create a subfolder “CustomAssemblies” and check in\n  Within this folder create a subfolder “SPCAF”\n  Copy only the following assemblies from SPCAF installation directory to that folder:\n ICSharpCode.Decompiler.dll ICSharpCode.NRefactory.CSharp.dll ICSharpCode.NRefactory.dll Jurassic.dll log4net.dll Microsoft.Deployment.Compression.Cab.dll Microsoft.Deployment.Compression.dll Mono.Cecil.dll Mono.Cecil.Pdb.dll SPCAF.Dependencies.dll SPCAF.exe SPCAF.exe.config SPCAF.Engine.dll SPCAF.Engine.dll.config SPCAF.Inventory.dll SPCAF.Metrics.dll SPCAF.Reports.dll SPCAF.Reports.Engine.dll SPCAF.Reports.MigrationAssessment.dll SPCAF.Rules.Apps.dll SPCAF.Rules.dll SPCAF.Rules.JavaScript.dll SPCAF.Rules.MigrationAssessment.dll SPCAF.Integration.CSSLint.dll SPCAF.Integration.CSSLintRunner.exe SPCAF.Integration.JSHint.dll SPCAF.Integration.JSHintRunner.exe SPCAF.Sdk.dll SPCAF.Sdk.XmlSerializers.dll log4net.config RazorEngine.dll System.Web.Razor.dll  Do not deploy the assemblies\n SPCAF.VSPackage SPCAF.VSPackage.Common    Also include the License.lic file with your license (can be found in users AppData directory)\n  Copy the assembly from folder “TeamBuildActivites” in the SPCAF installation directory to that folder in TFS\n  Copy the folder “RuleSets” to the folder in TFS\nYou should end up as shown in the following screenshot:\n  Configure Build Controller to load the SPCAF Assemblies Now we need to tell the Build Controller that during a build the SPCAF assemblies should be loaded.\nAdd SPCAF Build Activity to the Process Template It is possible to manually edit the process template with a text editor. In this how-to you are going to use the designer in Visual Studio.\nAdd Build Activity with Designer in Visual Studio If you don’t want to add the build activity to the process template in XML you can use a visual designer in Visual Studio.\n  Make a copy of an existing Process Template e.g. DefaultTemplate.xaml in TFS an name it for instance DefaultTemplateSPCAF.xaml\n  Create a new project of type Class library in Visual Studio and delete the default created Class.cs\n  Add the copied Process template ‘DefaultTemplateSPCAF.xaml’ to the project via “Add Existing Item” and navigate to the folder with DefaultTemplateSPCAF.xaml. Important: Select “Add As Link” in the dialog to add only a link to the file.\n  Add the necessary reference to the project:\n Microsoft.TeamFoundation.Build.Workflow.dll Microsoft.TeamFoundation.VersionControl.Client.dll Microsoft.TeamFoundation.VersionControl.Common.dll    Add reference to SPCAF.BuildActivity.TFS2012 to the project from the previously created folder “CustomAssemblies”\nSee below the Visual Studio project with all references, the linked DefaultTemplateSPCAF.xaml\n  Open the process template in designer.\n  Add the SPCAF build activity to the toolbox: Right click in toolbox and select “Choose items…”. In tab System.Activites Components select “Browse…” and select the assembly SPCAF.BuildActivity.TFS2012 from the folder “CustomAssemblies”. The Build Activity appear in the toolbox.\n  Because in TFS 2013 the default build process template is a little bit different we need to add a variable to store the path to the Binaries Directory. Open the tab “Variables”, add a variable named “BinariesDirectory” with the type “String”, you can leave the scope in its default setting.\n  In the process template navigate to Compile, Test and Publish and open the try block. Drag a GetEnvironmentVariableactivity below the “Get Impacted Tests”-activity. Set the activity arguments according to the table below:\n   Argument Value     Name Microsoft.TeamFoundation.Build.Activities.Extensions.WellKnownEnvironmentVariables.BinariesDirectory   DisplayName Get Binaries Folder   Result BinariesDirectory      Drag the SPCAF build activity below the Get Binaries Folder activity.\nYou should end up with the following setup:\n  Configure the SPCAF build activity to your needs (see parameters below).\n  Save the process template and check in.\n  Parameters of Build Activity The following parameters can be configured for the build activity.\n   Argument Description Sample Value     DisplayName Required String. Title of activity, used in logfiles. “Run SharePoint Code Analysis SPCAF”   SettingsFile Optional String. Name of settings file in folder “/RuleSets” or full path to a different ruleset file.    TempFolder Optional String. Path to temp folder. If not set SPCAF uses a standard temp folder.    FailBuildOnError Optional Boolean. Default FALSE. If TRUE the build fails if SPCAF detects errors. FALSE   IgnoreExceptions Optional Boolean. Default TRUE. TRUE to ignore exceptions during analysis. Settings this value helps to ensure that the build finishes successfully also in case of exceptions. TRUE   InputDirectory Required String. Path to WSP solutions. Can be a folder name or a list of files (separated by ‘;’). BinariesDirectory   LogExceptionStack Optional Boolean. Default FALSE. In case of problems with SPCAF setting this value to TRUE adds more information to the logfile which describes the error in detail. FALSE   OutputFilename Optional String. Defines the ouptput filename of the reports. Typically the output folder should be in the BinariesDirectory. After successful build the whole BinariesDirectory is copied to the DropLocation. Alternatively the DropLocation or any other folder can be used to save the results. System.IO.Path.Combine(BinariesDirectory, “SPCAFResults\\SPCAFResults.xml”)   LogFile Optional String. Defines the path to the log file. System.IO.Path.Combine(BinariesDirectory, “SPCAFResults\\spcaf.log”)   ReportGeneratorTypes Optional String. Defines which reports should be created “HTML;XML;DGML;DOCX;PDF”   TreatWarningsAsErrors Optional Boolean. Default FALSE. If TRUE all warnings will be evaluated as errors. FALSE   ThrowExceptionOnError Optional Boolean. Default FALSE. If TRUE an exception will be throw in case of critical errors or errors. FALSE (Available since version 4.5.2)   Verbosity Optional String. Detail level of output (e.g. minimal, default: normal). normal   SkipProjectCreation Optional Boolean. Default FALSE. If TRUE no project (.spcaf) file is created as output of the analysis. FALSE    The build activity returns the following values after analysis.\n   Argument Description     CriticalErrors Integer. Contains the number of critical errors after analysis.   Errors Integer. Contains the number of errors after analysis.   CriticalWarnings Integer. Contains the number of critical warnings after analysis.   Warnings Integer. Contains the number of warnings after analysis.   Information Integer. Contains the number of information after analysis.    Create a new Build Definition Now we can use the new process template in a new Build Definiiton\n  Create a new Build Definition in TFS\n  In the build definition goto tab “Process” and select “New..” and “Select an existing XAML file” and choose the DefaultTemplateSPCAF.xaml\n  For building SharePoint projects a special setting is needed: Go in process tab to “3. Advanced” and change the parameter “MSBuild Arguments” to “/p:IsPackaging=true”. This ensure that during the build process the WSP files are created.\n  Run a build with the new Build Definition. To check if SPCAF was configured correctly check the log. There you can find the output of the analysis.\n  In case of found errors and warnings during analysis the result can be found in the Build Summary.\n  Navigate to the DropLocation. There you should find the created SPCAF reports.\n  ",
    "ref": "/sharepoint/run-spcaf-analysis-teambuild/"
  },{
    "title": "How to run SPCAF v4 analysis during TeamBuild in TFS 2013",
    "date": "",
    "description": "",
    "body": "Update October 15, 2014: This post is based on SPCAF version 4.*, and is updated to include the TFS Build Activity changes in SPCAF version 4.5.2.\nIf you are looking how to run SPCAF v5 during TeamBuild in TFS 2013, see this post.\n This how-to is based on the SPCAF how-to written for TFS 2012.\nSharePoint code analysis with SPCAF can also be executed during a TFS Team Build. This helps to ensure the correctness of the SharePoint code. During the Team Build all found errors and warnings are listed in the build result. Additionally the SPCAF reports can be generated and saved to the output directory.\nSPCAF supports the Team Build with the following products:\n TFS 2010 TFS 2012 TFS 2013 (with this how-to) Team Foundation services (TFS Online)  To support TFS 2010 and TFS 2012 SPCAF comes with 2 different build activities which can be integrated into the workflow of a Team Build, depending on the version of TFS. The build activities can be found within the installation directory of SPFAC in subfolder “TeamBuildActivities”.\n SPCAF.BuildActivity.TFS2010.dll SPCAF.BuildActivity.TFS2012.dll (also used for TFS 2013)  Note: The build activities should not be copied directly into the installation folder of SPCAF because SPCAF searches during analysis within the installation folder for custom rules. As the activities depend on Team Build assemblies they cannot be loaded and SPCAF cannot execute.\nNote: If you are not familiar with configuration of team builds in TFS please request somebody to help you.\nThe following steps provide the general instructions for the Team Build. Some standard TFS configuration steps are skipped.\nPreparation To run SPCAF on the build server the SPCAF assemblies must be available on the build server. You don’t need to install SPCAF on the server!\n  Open Source Control of TFS and navigate to folder “BuildProcessTemplates” of your team project It is possible that this folder does not exist in your TFS 2013 team project. You can create it manually.\n  Create a subfolder “CustomAssemblies” and check in\n  Within this folder create a subfolder “SPCAF”\n  Copy only the following assemblies from SPCAF installation directory to that folder:\n ICSharpCode.Decompiler.dll ICSharpCode.NRefactory.CSharp.dll ICSharpCode.NRefactory.dll Jurassic.dll log4net.dll Microsoft.Deployment.Compression.Cab.dll Microsoft.Deployment.Compression.dll Mono.Cecil.dll Mono.Cecil.Pdb.dll Mono.Cecil.Rocks.dll Spark.dll SPCAF.Dependencies.dll SPCAF.Engine.dll SPCAF.Inventory.dll SPCAF.Metrics.dll SPCAF.Rules.dll SPCAF.Integration.CSSLint.dll SPCAF.Integration.CSSLintRunner.exe SPCAF.Integration.JSHint.dll SPCAF.Integration.JSHintRunner.exe SPCAF.Sdk.dll SPCAF.Sdk.XmlSerializers.dll log4net.config  Do not deploy the assemblies\n Autofac.Portable.dll De.TorstenMandelkow.MetroChart.dll SPCAF.Client.Core.PortableInfrastructure SPCAF.VSPackage SPCAF.VSPackage.Common    Also include the License.lic file with your license (can be found in users AppData directory)\n  Copy the assembly from folder “TeamBuildActivites” in the SPCAF installation directory to that folder in TFS\n  Copy the folder “RuleSets” to the folder in TFS\n  You should end up as shown in the following screenshot:\nConfigure Build Controller to load the SPCAF Assemblies Now we need to tell the Build Controller that during a build the SPCAF assemblies should be loaded.\nAdd SPCAF Build Activity to the Process Template It is possible to manually edit the process template with a text editor. In this how-to you are going to use the designer in Visual Studio.\nAdd Build Activity with Designer in Visual Studio If you don’t want to add the build activity to the process template in XML you can use a visual designer in Visual Studio.\n  Make a copy of an existing Process Template e.g. DefaultTemplate.xaml in TFS an name it for instance DefaultTemplateSPCAF.xaml\n  Create a new project of type Class library in Visual Studio and delete the default created Class.cs\n  Add the copied Process template ‘DefaultTemplateSPCAF.xaml’ to the project via “Add Existing Item” and navigate to the folder with DefaultTemplateSPCAF.xaml. Important: Select “Add As Link” in the dialog to add only a link to the file.\n  Add the necessary reference to the project:\n Microsoft.TeamFoundation.Build.Workflow.dll Microsoft.TeamFoundation.VersionControl.Client.dll Microsoft.TeamFoundation.VersionControl.Common.dll    Add reference to SPCAF.BuildActivity.TFS2012 to the project from the previously created folder “CustomAssemblies”\nSee below the Visual Studio project with all references, the linked DefaultTemplateSPCAF.xaml\n  Open the process template in designer.\n  Add the SPCAF build activity to the toolbox: Right click in toolbox and select “Choose items…”. In tab System.Activites Components select “Browse…” and select the assembly SPCAF.BuildActivity.TFS2012 from the folder “CustomAssemblies”. The Build Activity appear in the toolbox.\n  Because in TFS 2013 the default build process template is a little bit different we need to add a variable to store the path to the Binaries Directory. Open the tab “Variables”, add a variable named “BinariesDirectory” with the type “String”, you can leave the scope in its default setting.\n  In the process template navigate to Compile, Test and Publish and open the try block. Drag a GetEnvironmentVariableactivity below the “Get Impacted Tests”-activity. Set the activity arguments according to the table below:\n   Argument Value     Name Microsoft.TeamFoundation.Build.Activities.Extensions.WellKnownEnvironmentVariables.BinariesDirectory   DisplayName Get Binaries Folder   Result BinariesDirectory      Drag the SPCAF build activity below the Get Binaries Folder activity.\nYou should end up with the following setup:\n  Configure the SPCAF build activity to your needs (see parameters below).\n  Save the process template and check in.\n  Parameters of Build Activity The following parameters can be configured for the build activity.\n   Argument Description Sample Value     DisplayName Required String. Title of activity, used in logfiles. “Run SharePoint Code Analysis SPCAF”   SettingsFile Optional String. Name of settings file in folder “/RuleSets” or full path to a different ruleset file.    TempFolder Optional String. Path to temp folder. If not set SPCAF uses a standard temp folder.    FailBuildOnError Optional Boolean. Default FALSE. If TRUE the build fails if SPCAF detects errors. FALSE   IgnoreExceptions Optional Boolean. Default TRUE. TRUE to ignore exceptions during analysis. Settings this value helps to ensure that the build finishes successfully also in case of exceptions. TRUE   InputDirectory Required String. Path to WSP solutions. Can be a folder name or a list of files (separated by ‘;’). BinariesDirectory   LogExceptionStack Optional Boolean. Default FALSE. In case of problems with SPCAF setting this value to TRUE adds more information to the logfile which describes the error in detail. FALSE   OutputFilename Optional String. Defines the ouptput filename of the reports. Typically the output folder should be in the BinariesDirectory. After successful build the whole BinariesDirectory is copied to the DropLocation. Alternatively the DropLocation or any other folder can be used to save the results. System.IO.Path.Combine(BinariesDirectory, “SPCAFResults\\SPCAFResults.xml”)   LogFile Optional String. Defines the path to the log file. System.IO.Path.Combine(BinariesDirectory, “SPCAFResults\\spcaf.log”)   ReportGeneratorTypes Optional String. Defines which reports should be created “HTML;XML;DGML;DOCX” (DOCX is supported since version 4.5.2)   TreatWarningsAsErrors Optional Boolean. Default FALSE. If TRUE all warnings will be evaluated as errors. FALSE   ThrowExceptionOnError Optional Boolean. Default FALSE. If TRUE an exception will be throw in case of critical errors or errors. FALSE (Available since version 4.5.2)   Verbosity Optional String. Detail level of output (e.g. minimal, default: normal). normal    The build activity returns the following values after analysis. (Supported since version 4.5.2)\n   Argument Description     CriticalErrors Integer. Contains the number of critical errors after analysis.   Errors Integer. Contains the number of errors after analysis.   CriticalWarnings Integer. Contains the number of critical warnings after analysis.   Warnings Integer. Contains the number of warnings after analysis.   Information Integer. Contains the number of information after analysis.    Create a new Build Definition Now we can use the new process template in a new Build Definiiton\n  Create a new Build Definition in TFS\n  In the build definition goto tab “Process” and select “New..” and “Select an existing XAML file” and choose the DefaultTemplateSPCAF.xaml\n  For building SharePoint projects a special setting is needed: Go in process tab to “3. Advanced” and change the parameter “MSBuild Arguments” to “/p:IsPackaging=true”. This ensure that during the build process the WSP files are created.\n  Run a build with the new Build Definition. To check if SPCAF was configured correctly check the log. There you can find the output of the analysis.\n  In case of found errors and warnings during analysis the result can be found in the Build Summary.\n  Navigate to the DropLocation. There you should find the created SPCAF reports.\n  ",
    "ref": "/sharepoint/run-spcaf-analysis-teambuild-tfs-2013/"
  },{
    "title": "MSDN Subscriber downloads using Internet Explorer 11",
    "date": "",
    "description": "",
    "body": "Internet Explorer 11, that ships with Windows 8.1 and comes as an update for Windows 7, has some problems launching the File Transfer Manager on the MSDN Subscriber Downloads section.\nMicrosoft published some guidance to work around this issue:\n“To work around this issue, try to download the file in Internet Explorer 9 mode. To do this, follow these steps:\n In Internet Explorer, open the MSDN Subscriptions download page. In the Search box, search for the product that you want to download. Open the Developer Tools pane. To do this, press F12. Open the Emulation screen. To do this, press F8. On the Document mode list under Mode, click 9. On the User agent string list under Mode, click Internet Explorer 9.  **Note** After you change the user agent string setting, the download page reloads in Internet Explorer 9 mode.  Try again to download the product. The File Transfer Manager application or another download manager should open. After the download begins, close the Developer Tools pane. To do this, press F12 or click the Close button in the upper-right corner of the pane.  Note After the download begins, you can close the Developer Tools pane without interrupting the download progress. The browser remains in Internet Explorer 9 mode until you close this pane.”\n",
    "ref": "/msdn/msdn-subscriber-downloads-using-internet-explorer-11/"
  },{
    "title": "Windows Server 2012 R2 install on HP MicroServer N40L fails",
    "date": "",
    "description": "",
    "body": "This weekend I planned to install Windows Server 2012 R2 Essentials on my HP ProLiant MicroServer N40L to replace my WHS 2011 installation.\nThere was one problem, the installation never passed the “Getting Devices Ready – 84%” point.\nSearching the internet I came across this TechNet post. The thread suggests it is a problem with the onboard NIC. Disabling the NIC in the BIOS was indeed the solution to get R2 installing correctly, but a server without network connection is useless.\nHP is aware of the issue and published a BIOS update on November 15 that “Addressed an issue where Microsoft Windows 2012 R2 may stop responding while booting the operating system”, according to the release notes. After updating the BIOS I enabled the NIC again and everything works fine.\n",
    "ref": "/windows-server/windows-server-2012-r2/windows-server-2012-r2-installation-hp-microserver-n40l-fails/"
  },{
    "title": "Display MVC 5 web site in an IFrame",
    "date": "",
    "description": "",
    "body": "ASP.Net MVC 5 automatically adds a HTTP header called X-Frame-Options with the value SAMEORIGIN to your web application. That header is intended to prevent click jacking and makes sure your site can’t be loaded in an IFrame. You can find more information about this header here.\nBut if you want to display your web application in an IFrame, the header is a pain the ass. The information about how to disable this header is not easy to find, the only solution I found is on a Japanese blog.\nThe solution is easy to implement; you can disable the header by placing the following code in your Global.asax.cs file.\nprotected void Application_Start() { AreaRegistration.RegisterAllAreas(); WebApiConfig.Register(GlobalConfiguration.Configuration); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); RouteConfig.RegisterRoutes(RouteTable.Routes); BundleConfig.RegisterBundles(BundleTable.Bundles); // Disable the HTTP Header X-Frame-Options: SAMEORIGIN  AntiForgeryConfig.SuppressXFrameOptionsHeader = true; } ",
    "ref": "/asp-net/display-mvc-5-web-site-in-an-iframe/"
  },{
    "title": "Localized resource for token ‘Direction’ could not be found",
    "date": "",
    "description": "",
    "body": "You have created a neat SharePoint feature that works great. But in the logs files several errors pop up as soon as you deploy the new feature, complaining about a Localized resource token ‘Direction’. You haven’t created such a key in your resources files, so what’s up?\nThe log files may look like this:\nFailed to open the file 'C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\14\\Template\\Features\\...\\Resources\\Resources.en-US.resx'. #2006e: The specified path \u0026quot;\u0026quot; does not exist. Failed to read resource file \u0026quot;C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\14\\Template\\Features\\...\\Resources\\Resources.en-US.resx\u0026quot; from feature id \u0026quot;guid\u0026quot;. Failed to open the language resource for guid keyfile Resources. Failed to open the file 'C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\14\\Template\\Features\\...\\Resources\\Resources.resx'. #2006e: The specified path \u0026quot;\u0026quot; does not exist. Failed to read resource file \u0026quot;C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\14\\Template\\Features\\...\\Resources\\Resources.resx\u0026quot; from feature id \u0026quot;guid\u0026quot;. Failed to open the language resource for guid keyfile Resources. Localized resource for token 'Direction' could not be found for file with path: \u0026quot;C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\14\\Template\\Features\\...\\List1\\schema.xml\u0026quot;. Analyzing the error takes us back to the definition of a list in the feature. In the file schema.xml, that Visual Studio generated while creating the List Definition, we can find the Direction key. (If you wonder what this parameter does, read more)\nList xmlns:ows=\u0026#34;Microsoft SharePoint\u0026#34; Title=\u0026#34;List1\u0026#34; FolderCreation=\u0026#34;FALSE\u0026#34; Direction=\u0026#34;$Resources:Direction;\u0026#34; Url=\u0026#34;Lists/List1\u0026#34; BaseType=\u0026#34;0\u0026#34;\u0026amp;gt; So why is this generated code causing errors? Because there is no resources file specified in the call to the Direction key, SharePoint will look in the default places where you can place your resources files in the following order (given that your language is US-English):\n A file called Resources.en-US.resx in the feature folder. (E.g. C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\14\\Template\\Features\u0026amp;#8230;\\Resources\\Resources.en-US.resx) A file called Resources.resx in the feature folder. (E.g. C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\14\\Template\\Features\u0026amp;#8230;\\Resources\\Resources.resx)  How can you solve this? There are 3 options to fix this problem.\n Make sure that in your resources file, Resources.resx (with its variants of languages that you want), there is a ‘Direction’ Key defined. (Possible values: LTR, RTL, none) Fill the “DefaultResourceFile” property of your Feature with the name of the file of Resources that you want to use. This file must be in the path: C:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\14\\Resources Change the generated Schema.xml file. In the example given it would be: Direction = “$Resources: core, Direction;” In this way, we indicate that the Direction key is in the file Core.resx (in the 14\\Resources, it’s the default SharePoint resources file)   There is a fourth option that is a hybrid between option 2 and 3. You can specify core as “DefaultResourceFile” in your feature properties.\nOn the internet there are some other people that have the same problem  Luis Manez: Localized resource for token ‘Direction’ could not be found for file with path Mystic Slayer’s: Localized resource for token ‘direction’ could not be found for file with path  ",
    "ref": "/sharepoint/localized-resource-for-token-direction-could-not-be-found/"
  },{
    "title": "Track bugs as backlog items",
    "date": "",
    "description": "",
    "body": "When you are using the CMMI project template in TFS 2012 and use the Backlog to track your Work Items there are scenarios where you want to see Bugs in your Backlog. The Scrum template already has this behavior by default.\nOn the internet there is some guidance to make this possible, but that information is not complete. (http://msdn.microsoft.com/en-us/library/vstudio/jj920163.aspx)\nSo here you have a complete step-by-step guidance to do so.\nAdd the required fields to the bug work item type For the configuration to be valid, you must first add the estimate and backlog sort order fields to the bug work item type.\n  If you don\u0026rsquo;t have admin permissions for your team project, get them.\n  Open a Command Prompt window where either Visual Studio or Team Explorer is installed and enter:\ncd %programfiles%\\Microsoft Visual Studio 11.0\\Common7\\IDE\n(On a 64-bit edition of Windows, replace %programfiles% with %programfiles(x86)%)\n  Export the bug work item type definition.\nwitadmin exportwitd /collection:\u0026quot;http://MyServer:8080/tfs/DefaultCollection\u0026quot; /p:\u0026quot;MyProject\u0026quot; /n:bug /f:\u0026quot;Directory/bug.xml\u0026quot;\n  Add the Discipline and Size fields.\n\u0026lt;FIELDS\u0026gt; … \u0026lt;FIELD name=\u0026#34;Discipline\u0026#34; refname=\u0026#34;Microsoft.VSTS.Common.Discipline\u0026#34; type=\u0026#34;String\u0026#34; reportable=\u0026#34;dimension\u0026#34;\u0026gt; \u0026lt;HELPTEXT\u0026gt;The discipline to which the task belongs\u0026lt;/HELPTEXT\u0026gt; \u0026lt;ALLOWEDVALUES expanditems=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;LISTITEM value=\u0026#34;Development\u0026#34; /\u0026gt; \u0026lt;LISTITEM value=\u0026#34;Analysis\u0026#34; /\u0026gt; \u0026lt;LISTITEM value=\u0026#34;User Experience\u0026#34; /\u0026gt; \u0026lt;LISTITEM value=\u0026#34;User Education\u0026#34; /\u0026gt; \u0026lt;LISTITEM value=\u0026#34;Test\u0026#34; /\u0026gt; \u0026lt;/ALLOWEDVALUES\u0026gt; \u0026lt;/FIELD\u0026gt; \u0026lt;FIELD name=\u0026#34;Size\u0026#34; refname=\u0026#34;Microsoft.VSTS.Scheduling.Size\u0026#34; type=\u0026#34;Double\u0026#34; reportable=\u0026#34;measure\u0026#34; formula=\u0026#34;sum\u0026#34;\u0026gt; \u0026lt;HELPTEXT\u0026gt;The size of work estimated for implementing this requirement\u0026lt;/HELPTEXT\u0026gt; \u0026lt;/FIELD\u0026gt; \u0026lt;/FIELDS\u0026gt;   Add the Stack Rank, Discipline and Size fields to the work item form.\n\u0026lt;FORM\u0026gt; … \u0026lt;Column PercentWidth=\u0026#34;33\u0026#34;\u0026gt; \u0026lt;Group Label=\u0026#34;Planning\u0026#34;\u0026gt; \u0026lt;Column PercentWidth=\u0026#34;25\u0026#34;\u0026gt; \u0026lt;Control Type=\u0026#34;FieldControl\u0026#34; FieldName=\u0026#34;Microsoft.VSTS.Common.Priority\u0026#34; Label=\u0026#34;Priority\u0026#34; LabelPosition=\u0026#34;Left\u0026#34; /\u0026gt; \u0026lt;Control Type=\u0026#34;FieldControl\u0026#34; FieldName=\u0026#34;Microsoft.VSTS.Common.Severity\u0026#34; Label=\u0026#34;Severity\u0026#34; LabelPosition=\u0026#34;Left\u0026#34; /\u0026gt; \u0026lt;Control Type=\u0026#34;FieldControl\u0026#34; FieldName=\u0026#34;Microsoft.VSTS.Common.Triage\u0026#34; Label=\u0026#34;Triage\u0026#34; LabelPosition=\u0026#34;Left\u0026#34; /\u0026gt; \u0026lt;Control Type=\u0026#34;FieldControl\u0026#34; FieldName=\u0026#34;Microsoft.VSTS.CMMI.Blocked\u0026#34; Label=\u0026#34;Blocked\u0026#34; LabelPosition=\u0026#34;Left\u0026#34; /\u0026gt; \u0026lt;Control Type=\u0026#34;FieldControl\u0026#34; FieldName=\u0026#34;Microsoft.VSTS.Common.StackRank\u0026#34; Label=\u0026#34;Stack Rank:\u0026#34; LabelPosition=\u0026#34;Left\u0026#34; NumberFormat=\u0026#34;WholeNumbers\u0026#34; MaxLength=\u0026#34;10\u0026#34; /\u0026gt; \u0026lt;Control Type=\u0026#34;FieldControl\u0026#34; FieldName=\u0026#34;Microsoft.VSTS.Common.Discipline\u0026#34; Label=\u0026#34;Discipline\u0026#34; LabelPosition=\u0026#34;Left\u0026#34; /\u0026gt; \u0026lt;Control Type=\u0026#34;FieldControl\u0026#34; FieldName=\u0026#34;Microsoft.VSTS.Scheduling.Size\u0026#34; Label=\u0026#34;Size\u0026#34; LabelPosition=\u0026#34;Left\u0026#34; /\u0026gt;  \u0026lt;/Column\u0026gt; \u0026lt;/Group\u0026gt; \u0026lt;/Column\u0026gt; … \u0026lt;/FORM\u0026gt;   Import the updates bug definition.\nwitadmin importwitd /collection:\u0026quot;http://MyServer:8080/tfs/DefaultCollection\u0026quot; /p:\u0026quot;MyProject\u0026quot; /f:\u0026quot;Directory/bug.xml\u0026quot;\n  Add the bug work item type to the Requirements Category   Export the categories definition.\nwitadmin exportcategories /collection:\u0026quot;http://MyServer:8080/tfs/DefaultCollection\u0026quot; /p:\u0026quot;MyProject\u0026quot; f:\u0026quot;Directory/categories.xml\u0026quot;\n  Add bug to the Requirements Category.\n\u0026lt;CATEGORY refname=\u0026#34;Microsoft.RequirementCategory\u0026#34; name=\u0026#34;Requirement Category\u0026#34;\u0026gt; \u0026lt;DEFAULTWORKITEMTYPE name=\u0026#34;User Story\u0026#34; /\u0026gt; \u0026lt;WORKITEMTYPE name=\u0026#34;Bug\u0026#34; /\u0026gt; \u0026lt;/CATEGORY\u0026gt;   Import the categories file.\nwitadmin importcategories /collection:\u0026quot;http://MyServer:8080/tfs/DefaultCollection\u0026quot; /p:\u0026quot;MyProject\u0026quot; /f:\u0026quot;Directory/categories.xml\u0026quot;\n  Confirm that you can add bugs to the product backlog Open the product backlog page, or refresh the page if it\u0026rsquo;s already open.\nYou should see a drop-down menu for the work item Type.\nModify column configuration for your product backlog board When you go to the product backlog board after your modifications you will get the following error:\nClick on the \u0026ldquo;correct this now\u0026rdquo; link. In the screen that follows you need to map the properties of the Bug type to the columns in your board.\nClick OK to save your changes. Your board should display correctly:\n",
    "ref": "/tfs/track-bugs-as-backlog-items/"
  },{
    "title": "Load JQuery scripts from a CDN with local fallback",
    "date": "",
    "description": "",
    "body": "How many unique visitors you\u0026rsquo;ve got last month? I bet the number is still under 1 billion, right?\nSo you\u0026rsquo;d better use Google\u0026rsquo;s copy of jQuery instead of yours. If your user still has the cached file of Google\u0026rsquo;s website (or from many other sites that uses its Content Delivery Network (CDN)) their browser will just get the cached version, improving a lot your website\u0026rsquo;s performance.\nYou can use it by copying \u0026amp; pasting this HTML:\n\u0026lt;script src=\u0026#34;//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;window.jQuery || document.write(\u0026#39;\u0026lt;script src=\u0026#34;js/libs/jquery-1.7.2.min.js\u0026#34;\u0026gt;\u0026lt;\\/script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt; In SharePoint scenarios this is very useful in Internet Websites and in Intranet sites where you now the local network has internet access.\nFind more JQuery tips on http://webdesignledger.com/tips/9-jquery-mistakes-you-shouldnt-commit\n",
    "ref": "/jquery/load-jquery-scripts-from-a-cdn-with-local-fallback/"
  },{
    "title": "Modify the groups listed when granting permissions to a site",
    "date": "",
    "description": "",
    "body": "When you click the button ‘Grant Permissions’ in the Permission screen of a site you always get the option to insert a user inside a SharePoint group. Most of the time there are some groups listed that are not applicable. But we can do something about that.\n  Go to the Site Settings of your website\n  Click ‘People and groups’\n  Click on the ‘More…’ link in the Quick Launch in the Groups section\n  Click ‘Settings’\n  Click ‘Edit Group Quick Launch’\n  In the following screen you can pick the groups that show up in the Group Quick Launch, but this list will also be used in the ‘Grant Permission’ screen\n  ",
    "ref": "/sharepoint/6/"
  },{
    "title": "About",
    "date": "",
    "description": "",
    "body": "My name is Joost Haneveer, I work at BDO for the Global IT Team in Eindhoven (The Netherlands).\nThis blog is about the tricks I find while doing my day-to-day work. My background is in (SharePoint) development, currently I\u0026rsquo;m Development manager guiding several Microsoft oriented development teams.\n (function() { var s = document.createElement('script'); s.type = 'text/javascript'; s.async = true; s.src = '//cdn.youracclaim.com/assets/utilities/embed.js'; var o = document.getElementsByTagName('script')[0]; o.parentNode.insertBefore(s, o); })();  ",
    "ref": "/about/"
  }]
